--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 9th, 2020. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (3 points).                                   @n@nota1:

Prove, using only the definitions of propositional logic, that the deduction rule of resolution in propositional logic is correct, that is, if from the two clauses C1 and C2 by resolution we can obtain a clause
D, then C1 ∧ C2 |= D.

--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:

Assuming you can use a SAT solver or any other algorithm, explain very briefly what you would do
and what the computational cost would be and why, to decide the following two problems:

2a) Given a formula F in disjunctive normal form (DNF), decide whether F is a tautology.

2b) Given a formula F in disjunctive normal form (DNF), decide whether F is a satisfiable.


--------------------------------------------------------------------------------------------------

Problem 3. (4 points). 
                  
Let P be a set of propositional predicate symbols. Let S be a set of clauses over P and let N be a
subset of P. We define flip(N, S) to be the set of clauses obtained from S by flipping (changing the
sign) of all literals with symbols in N.

For example, 	flip( {p, q}, { p ∨ ¬q ∨ ¬r, q ∨ r } ) is { ¬p ∨ q ∨ ¬r, ¬q ∨ r }.

A clause is called Horn if it has at most one positive literal. A set of clauses S is called renamable
Horn if there is some N ⊆ P such that flip(N, S) is a set of Horn clauses.

3a) Explain in three lines: given S and N such that flip(N, S) is a set of Horn clauses, what would
you do to efficiently decide whether S is satisfiable, and why?

3b) Given an arbitrary set of clauses S, we want to decide whether it is renamable Horn and, if so,
find the corresponding N. We will do this using an algorithm based on... SAT! For each p ∈ P, we
introduce a SAT variable flipped(p) meaning that symbol p is in N. Then we add clauses for every
clause C of S and every pair of literals l and l' in C, forbidding that after doing all flips,  l and l'
both become positive.

Explain in three lines: which clauses do you need, what is the cost of the resulting SAT-based
algorithm and why?

--------------------------------------------------------------------------------------------------

