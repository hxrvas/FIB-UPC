--------------------------------------------------------------------------------------------------
Logic in Computer Science, April 27th, 2016. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1.                               

Given two propositional formulas F and G, is it true that F → G is a tautology iff F |= G? Prove
it using only the formal definitions of propositional logic.

-F v G is a tautology
AI, I |= -F v G
AI, eval_I(-F v G) = 1
AI, max(eval_I(-F), v eval_I(G)) = 1
AI, eval_I(-F) = 1 or eval_I(G) = 1
AI, I |= -F or I |= G
AI, I not|= F or I |= G
F |= G

--------------------------------------------------------------------------------------------------

Problem 2.                               


Let F be a formula. Is it true that F is satisfiable if, and only if, all logical consequences of F are
satisfiable formulas? Prove it using only the formal definitions of propositional logic.

This is true.

=> Let G be any logical consequence of F, that is F|=G. Now F satisfiable means F has some model I
and by definition of F|=G, every model of F is  a model o G, wich implies G is satisfiable.

<= By definition of logical consequence we have F |= F, so if all logical consequences of F are 
satisfiable formulas then F itself is also satisfiable.

--------------------------------------------------------------------------------------------------

Problem 3. 
                  
What is Horn-SAT? What is its computational complexity? Explain very briefly why.

Horn-SAT is the problem of deciding the satisfiability of a set of clauses S such that all
clauses in S are Horn: they have at most one positive literal.

Its computational complexity is linear. You can solve it by positive unit propagation. 
--------------------------------------------------------------------------------------------------


Problem 4. 
                  
Consider the following decision problem, called “MaxSAT”:
Input: A natural number k and a set S of n propositional clauses over propositional symbols P.
Question: Is there any interpretation I : P → {0, 1} that satisfies at least k clauses of S?

4a) Do you think that MaxSAT is polynomial? NP-complete? Exponential? Why?
It is NP-complete:
-MaxSAT is not easier than general SAT since SAT is the particular case of MaxSAT where k = n.
-MaxSAT is also not harder than SAT since one can reduce MaxSAT to SAT> decide MaxSAT with
one call to a SAT solver.

4b) How would you use a SAT solver to decide it?
Let S be {C1, ..., Cn}. Use new auxiliary variables x1, ...,  xn. Let S' be {C1 v -x1, ..., Cn v -xn}.
Then we need to find a model I for S' such that at least k of the auxiliary variables are true. So,
running the solver with input clauses S' U Cardinality constraint x1+...+xn >= k will find the desired I if it
exists and return unsat otherwise. 


4c) How would you use a SAT solver to solve the optimization version of MaxSAT, that is, how to
find the I that satisfies as many of the clauses of S as possible?

For this we need more than one call to the SAT solver.
A) Run the solver on the input S' defined as in 3b). Note that S'is satisfiable (just set all ai's to 1).
B) If it finds a model where m ai's are false, run again with input S' ∪ Card, where Card is the set
of clauses obtained by encoding the cardinality constraint ¬a1 + . . . + ¬an > m. Repeat step B (each
time finding models with more false ai's), until the solver returns unsat. The last solution found is the
optimal one.

--------------------------------------------------------------------------------------------------

