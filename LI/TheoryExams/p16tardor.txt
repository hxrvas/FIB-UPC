--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 22nd, 2016. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1.                               @n@nota1:

Let S be a set of propositional clauses over a set of n predicate symbols, and let Res(S) be its
closure under resolution. For each one of the following cases, indicate whether Res(S) is infinite or
finite, and, if finite, of which size. Very briefly explain why.

1a) If clauses in S have at most two literals.
Note that if clauses have at most two literals, clauses in Res(S) too. Each clause is a set of literals.
If there are n predicate simbols, there are 2n literals. There are 2n over 2 clauses of two literals, plus
2n clauses of 1 literal, plus thee empty clause, which altogether is O(n^2).

1b) S is a set of Horn clauses.
Note that if clauses are Horn, clauses in Res(S) are too. There are n negative literals, so there are 2^n clauses
with only negative literals. For each one of these, adding to it one positive literal, gives us the remainding Horn clauses.
Total: 2n+n*2^n.

1c) Every clause in S has either two literals or is a Horn clause.
We can obtain every clause, but it is still finite, there are at most 2^2n clauses in Res(S).

1d) S is an arbitrary set of propositional clauses.
At most 2^2n clauses.
--------------------------------------------------------------------------------------------------

Problem 2.                                   @n@nota2:

Let C1 and C2 be propositional clauses, and let D be the conclusion by resolution of C1 and C2.

2a) Is D a logical consequence of C1∨C2? Prove it formally, using only the definitions of propositional
logic.
In general, it is not true that p∨ C1' ∨ ¬p∨ C2'|= C1' ∨ C2'
. Note that p∨ C1' ∨ ¬p∨ C2'is a tautology. So C1 ∨ C2¬ |= D whenever D is not a tautology. 
Proof by counter example: take C1' = C2' = q for some symbol q and any interpretation I with I(q) = 0. 
Then I |= p ∨ q ∨ ¬p ∨ q but I not|= q, whichcompletes our proof.

2b) Is D a logical consequence of C1∧C2? Prove it formally, using only the definitions of propositional
logic.

If D is the conclusion by resolution of C1 and C2, then C1 is of the form p v C1', C2 is 'p v C2', D is
C1' v  C2'.

If p is 1:

I |= p v C1' & -p v C2' 
eval_I(p v C1' & -p v C2') = 1
min(eval_I(p v C1'), eval_I(-p v C2')) = 1
min(max(1, eval_I(C1')), max(0, eval_I(C2')) = 1
max(0, eval_I(C2')) = 1
eval_I(C2') = 1
max(eval_I(C1'), eval_I(C2')) = 1
I |= C1' v C2' 

Case where p is 0 is analogous

2c) Let S be a set of propositional clauses and let Res(S) be its closure under resolution. Is it true
that S is satisfiable if, and only if, the empty clause is not in Res(S)? Very briefly explain why.

⇒: S satisfiable implies that S has a model I, and, since S |= Res(S) (see below), this implies
I |= Res(S), which implies, since the empty clause is unsatisfiable, that the empty clause is not in
Res(S). We have S |= Res(S) since Res(S) is obtained from S by finitely many times adding to the
set a new clause that (as we have seen in 2b) is a logical consequence of two clauses we already have.

<= See the solution of lecture notes 3, excercise 20.
--------------------------------------------------------------------------------------------------

Problem 3.  

Consider the well-known NP-complete vertex cover problem: Given a natural number k and a
graph with n vertices and m edges {(u1, v1), . . . ,(um, vm)} with ui, vi ∈ {1 . . . n}, it asks whether the
graph has a k-cover, that is, a subset of size k of the vertices such that for each edge (ui, vi) at least
one of ui and vi is in the cover.

3a) How would you use a SAT solver to decide it?

Variables:
xj, meaning vertex j is in the k cover

Clauses:
	There is one two-literal clauses xu v xv for each edge.
	One cardinality constraint x1+..+xn <= k, expressing the cover has at most k vertices.


3b) How would you use a SAT solver for the optimization version of vertex cover, that is, given only
the graph, to find its smallest possible k-cover?

Note that for k=n we are sure there is a solution. Run the solver on the set of clauses with initial k = n-1.
If it finds a model with M ones, then run again, replacing the k with M. Repeat this until unsat. THe last model
found its the optimal one.

3c) In one exam last year, we considered the following decision problem, called minOnes: given a
natural number k and a set S of clauses over variables {x1, . . . , xn}, it asks whether S has any model
I with at most k ones, that is, with I(x1) + . . . + I(xn) ≤ k. Its optimization version is, given only
S, to find its model with the minimal number of ones. If the set of clauses S only has clauses with at
most two literals, does the optimization version of minOnes become polynomial? Explain briefly why.              

NO! (Unless P=NP). It is the same as the NP-complete vertex cover problem. 
--------------------------------------------------------------------------------------------------

