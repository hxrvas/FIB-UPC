--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 9th, 2020. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (3 points).                                   @n@nota1:

Below F, G, H denote arbitrary propositional formulas. Mark with an X the boxes of the true
statements (give no explanations).
1. If F ∧ G not|= H then F ∧ G ∧ H is unsatisfiable. 
2. If F is a tautology, then for every G we have G |= F. X
3. If F is unsatisfiable then ¬F is a tautology. X
4. If F ∧ G |= ¬H then F ∧ G ∧ H is unsatisfiable. X
5. If F ∨ G |= H then F ∧ ¬H is unsatisfiable. X
6. The formula p ∨ p is a logical consequence of (p ∨ q ∨ r) ∧ (¬q ∨ r) ∧ (¬r). X
7. If F is unsatisfiable, then for every G we have G |= F. 
8. It can happen that F |= G and F |= ¬G. X
9. The formula (p ∨ q) ∧ (¬p ∨ q) ∧ (¬p ∨ ¬q) ∧ (¬q ∨ p) is unsatisfiable. X
10. If F is a tautology, then for every G we have F |= G. 
11. If F is unsatisfiable then ¬F |= F. 
12. F is satisfiable if, and only if, all logical consequences of F are satisfiable formulas. X

--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:

2) Let C1 and C2 be propositional clauses, and let D be the conclusion by resolution of C1 and C2.
2a) Is D a logical consequence of C1∧C2? Prove it formally, using only the definitions of propositional
logic.

If D is the conclusion by resolution of C1 and C2, then C1 is of the form p v C1', C2 is 'p v C2', D is
C1' v  C2'.

If p is 1:

I |= p v C1' & -p v C2' 
eval_I(p v C1' & -p v C2') = 1
min(eval_I(p v C1'), eval_I(-p v C2')) = 1
min(max(1, eval_I(C1')), max(0, eval_I(C2')) = 1
max(0, eval_I(C2')) = 1
eval_I(C2') = 1
max(eval_I(C1'), eval_I(C2')) = 1
I |= C1' v C2' 

Case where p is 0 is analogous



2b) Let S be a set of propositional clauses and let Res(S) be its closure under resolution. Is it true
that S ≡ Res(S)? Very briefly explain why.

Yes. We have Res(S) |= S (all models of Res(S) are models of S) because Res(S) contains S. We also have S|=Res(S).
Let I be a model of S. Res(S) is obtained from S by finitely many times adding to the set a new clause that 
(as we have seen in 2a) is a logical consequence of two clauses we already have. So each time we add a new clause
C v D tto a set of the form Set U {p v C -p v D}, we will have I |= Set U {p v C -p v D} and then also 
I |= Set U {p v C -p v D C v D}.

--------------------------------------------------------------------------------------------------

Problem 3. (4 points). 
                  
Every propositional formula F over n variables can also expressed by a Boolean circuit with
n inputs and one output. In fact, sometimes the circuit can be much smaller than F because each
subformula only needs to be represented once. For example, if F is

x1 ∧ (x3 ∧ x4 ∨ x3 ∧ x4) ∨ x2 ∧ (x3 ∧ x4 ∨ x3 ∧ x4),

a circuit C for F with only five gates exists. Representing the output of each logical gate as a new
auxiliary variable ai and using a0 as the output of C, we can write C as:

a0 = or(a1,a2) a1 = and(x1,a3) a3 = or(a4,a4)
		   a2 = and(x2,a3) a4 = and(x3,x4)

Explain very briefly how you would use a standard SAT solver for CNFs to efficiently determine
whether two circuits C1 and C2, represented like this, are logically equivalent. Note: assume different
names b0, b1, b2 . . . are used for the auxiliary variables of C2.

Use the Tseitin transformation to transform the boolean circuit into a CNF. a0 and b0 are unitary clausules,
then each and of the form ai = and(p, q) gets three clausules -ai v p, -p v -q v ai, -ai v q, each or 
of the form ai = or(p, q) gets three clausules -ai v p v q, -p v ai, -q v ai. Same with the second circuit.

Then, to know if they are logically equivalent, we add two clauses -a0 v -b0, a0 v b0. If the SAT solver
returns unsatisfiable then it means they have the same model.

--------------------------------------------------------------------------------------------------

