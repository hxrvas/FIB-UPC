--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 9th, 2020. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (3 points).                                   @n@nota1:

1a) Let F, G, H be propositional formulas. Is it true that always (F ∧ G) ∧ H ≡ F ∧ (G ∧ H)?
Prove it using only the definition of propositional logic.

(F & G) & H ≡ (F & G) & H
eval_I((F & G) & H) = eval_I(F & (G & H))
min(eval_I(F & G), eval_I(H)) = min(eval_I(F), eval_I(G & H))
min(min(eval_I(F), eval_I(G)), eval_I(H)) = min(eval_I(F), min(eval_I(G)), eval_I(H)))
min(eval_I(F), eval_I(G), eval_I(H)) = min(eval_I(F), eval_I(G)), eval_I(H))

1b) Let F, G, H be propositional formulas. Is it true that always F ∧ (G ∨ H) ≡ F ∨ (G ∧ H)?
Prove it using only the definition of propositional logic.

No. Counter-example:
F = -p, G = q, H = q
Then, if I(p) = 1 and I(q) = 0
p & (q v q) = 0
p v (q & q) = 1

--------------------------------------------------------------------------------------------------

Problem 2. (2 points).                                   @n@nota2:

 Write all clauses obtained by applying Tseitin’s transformation to the formula
(p ∧ (q ∨ ¬r)) ∨ q. Use auxiliary variables named a0, a1, a2, . . . (where a0 is for the root).



	v (a0)

  & (a1)	   q

p   v (a2)

 q    -r


a0
a0 <-> a1 v q
a1 <-> p & a2
a2 <-> q v -r

a0

-a0 v a1 v q
-a1 v a0
-q v a0

-a1 v p
-a1 v a2
-p v -a2 v a1

-a2 v q v -r
-q v a2 
r v a2


--------------------------------------------------------------------------------------------------

Problem 3. (4 points). 
                  
John wants to buy a subset of Amazon’s n products (and, as you know, with a very large n). 
But he has the following 1 + p + q constraints, where all M, Ii, Lj , Rj denote subsets of {1 . . . n}:

He must buy all products of M

I1 . . . Ip are incompatibility sets: for each Ii, John cannot buy all products in Ii

Constraints L1 → R1 . . . Lq → Rq, where Li → Ri means that if John buys all products of
Li, then he must also buy all products of Ri

3a) Answer all three questions very briefly. What would you recommend John to do for efficiently
finding a set S of products that he can buy without violating any of the constraints?

This problem describes basically a HornSat set of clauses.

One positive unit clause for each element of M.
For each Ii a purely negative Horn clause.
For each constraint a horn Li->Ri and for each k in this Ri, a Horn clause xk v (- xj (Aj in Li))

 A HornSat set of clauses can be solved in 
linear time using positive unit propagation.



3b) Same question for finding a set S with minimal |S|.

Using positive unit propagation you already find the minimal set.

3c) Is the minimal set S of 3b) unique or can there be several distinct minimal sets?
Its unique.

--------------------------------------------------------------------------------------------------

Problem 4. (2 points).
 
Consider the following problem, called model counting:

Input: a natural number k and a set of propositional clauses S over symbols P.

Question: does S have at least k different models I : P → {0, 1}?

We want to analyze the computational complexity of model counting, that is, determine if it is polynomial, NP-complete, or perhaps even harder, etc. Answer all four questions very briefly (max. 10
words per question).

4a) (1 point) Is model counting at least as hard as SAT? (that is, can we express SAT as a model
counting problem?) Why?
Yes. A set of clauses is SAT iff the model counting problem with k = 1 is true.

4b) (4b,c,d: 1 bonus point, if short and correct) What do you think, is SAT at least as hard as model
counting? Why?
No, no way to do model counting by a polynomial number of calks to SAT is known. So SAT does not seem to be 
as hard.

4c,4d) Same questions if S is a set of Horn clauses.    
Same answers as before. In fact, no way to do Horn model counting by a polynomial number of calls to arbitrary
SAT is known.              

--------------------------------------------------------------------------------------------------