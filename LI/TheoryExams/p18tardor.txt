--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 5th, 2018. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (2 points).                                   @n@nota1:

1a) Is it true that for any two propositional formulas F and G, we have that ¬F ∨ G is a tautology
if and only if F |= G? Prove it using only the definition of propositional logic.

This is true.

F |= G
AI, I not|=F or I |= G
AI, eval_I(F)=0 or eval_I(G)=1
AI, 1-eval_I(F)=1 or eval_I(G) = 1
AI, eval_I(-F)=1 or eval_I(G) = 1
AI, max(eval_I(-F)=1, eval_I(G)) = 1
AI, eval_I(-F v G) = 1
AI, I |= -F v G
-F v G is a tautology

1b) Is it true that for any three propositional formulas F, G, H, we have that F ∧ (G ∨ H) is a
tautology iff (¬G ∧ H) ∨ ¬F is unsatisfiable? Prove it using only the definition of propositional logic.

This is false

Counterexample
Let F=pv-p, G=p and H=-p. Then, F & (G v H) is the formula (p v -p) & (p v -p) which is a tautology.
But (-G & H) v -F is the formula (-p & -p) v -(p v -p), which is satisfiable, because any I with I(p)=0
is a model.

--------------------------------------------------------------------------------------------------

Problem 2. (2 points).                                   @n@nota2:

Our friend John has invented something he calls a “propositional database”, which consists of a set
of positive unit clauses (propositional symbols) and of a set of “rules” of the form:
Condition → Consequence, where Condition and Consequence are sets of propositional symbols.
I asked John what he considers to be true facts, or simply “facts”, in his database, and he said:
“the minimal set of facts such that all positive unit clauses are facts, and, for every rule
Condition → Consequence, if all elements of Condition are facts, then also all elements of Consequence
are facts”.

2a) Given such a database D, we want to know if a certain symbol p is a fact in D. Explain very
briefly. What is the cost of deciding this? How?

The definition of the set of true facts is precisely the way Horn SAT is decided by positive unit propagation:
all positive unit clauses are facts, and each rule {p1, . . . , pn} → {q1, . . . , qm} has exactly the same effect as the 
propagation of the Horn clauses ¬p1 ∨ . . . ∨ ¬pn ∨ q1 . . . ¬p1 ∨ . . . ∨ ¬pn ∨ qm. 
This can be done in linear time.


2b) I want to know how many facts are true in D. Explain very briefly. What is the cost of counting
this? How?
After the positive unit propagation is done, we can count how many facts are true in D in linear time.



--------------------------------------------------------------------------------------------------

Problem 3. (4 points). 
MaxSAT is a problem related to SAT. It takes as input a natural number k and a set S
of n propositional clauses over propositional symbols P, and it asks whether there is any interpretation
I : P → {0, 1} that satisfies at least k clauses of S.

3a) Do you think that MaxSAT is polynomial? NP-complete? Exponential? Why?
It is NP-complete. For this, we need to show two things:
A) MaxSAT is NP-hard, since we can polynomially reduce SAT to MaxSAT. SAT is the particulare case of MaxSAT 
where k = n.
B) Max sat is in NP since one can polynomially reduce MaxSat to SAT as shown in the answer to 3b. MaxSAT is 
also in NP because one can verify a given solution, an interpretation I, in polynomial time, checking whether
indeed I satisfies at least k clauses.

3b) Is it true that, using auxiliary variables, one can decide MaxSAT in a single call to a SAT solver?
Explain why.
Yes, it is true. 
Let S be {C1, ..., Cn}. Use new auxiliary variables a1, ..., an. Let S' be {C1 v a1, ..., Cn v an}. Then
we need to find a model I for S' such taht at least k of the auxiliary variables are false. Let Card be the
set of clauses obtained by encoding the cardinality constraint -a1 + ... + -an >=k. Note that using, e.g., 
sorting networks, |Card| is polynomial (O(n log2n)).  Then, running the solverwith input clauses S' U Card will
find the desired I if it exists, and return unsat otherwise.

3c) How would you use a SAT solver to solve the optimization version of MaxSAT, that is, how to find
the I that satisfies as many of the clauses of S as possible? Give one single (and short) explanation.

For this we need more than one call to the SAT solver.
A) Run the solver on the input S' defined as in 3b). Note that S'is satisfiable (just set all ai's to 1).
B) If it finds a model where m ai's are false, run again with input S'∪ Card, where Card is the set of 
clauses obtained by encoding the cardinality constraint ¬a1 + . . . + ¬an > m. Repeat step B (each time 
finding models with more false a'is), until the solver returns unsat. The last solution found is the
optimal one.

3d) We want to 3-color a given graph with n nodes and m edges: assign one of the 3 colors to each
node such that for no edge (u, v) nodes u and v get the same color. Of course this may be impossible,
so we will allow some nodes to remain uncolored: they get no color. How can we use the ideas of 3b,c)
to compute the 3-coloring with the minimal number of such uncolored nodes?

Codify 3-color in SAT, the following way
Variables:
Cx_i wich means node x gets color i.

For each node x, add a clause Cx_1 v Cx_2 v Cx_3.
For each edge u, v, add clauses -Cu_1 v -Cv_1, -Cu_2 v -Cv_2, -Cu_3 v -Cv_3

Then, use the algorithm in explained in 3c to find the I that satisfies as many of the clauses as possible.
The clauses not satisfied are minimal nodes that get no color.


--------------------------------------------------------------------------------------------------

Problem 4. (2 points). 
Is 3-SAT NP-complete? Explain your answer very briefly, using the fact that SAT
(deciding the satisfiability of an arbitrary propositional formula F) is NP-complete.
     
Yes, 3-SAT is NP-complete, as its is NP-hard since we can polynomially reduce SAT to 3-SAT:
the Tseitin transformation in polynomial time reduces SAT for an arbitrary F to a polynomial-sizEd
3-SAT set of clauses S that is equisatisfiable to F.

It is also in NP, because you can polynomially reduce 3-SAT to SAT (trivial because 3-SAT is already
a particular case of SAT).

--------------------------------------------------------------------------------------------------

