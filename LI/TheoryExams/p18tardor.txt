--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 9th, 2020. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (3 points).                                   @n@nota1:

1a) Is it true that for any two propositional formulas F and G, we have that ¬F ∨ G is a tautology
if and only if F |= G? Prove it using only the definition of propositional logic.
1b) Is it true that for any three propositional formulas F, G, H, we have that F ∧ (G ∨ H) is a
tautology iff (¬G ∧ H) ∨ ¬F is unsatisfiable? Prove it using only the definition of propositional logic.

Yes.

¬F ∨ G is a tautology iff by definition of tautology
forall I, I |= ¬F ∨ G iff by definition of |=
forall I, evalI (¬F ∨ G) = 1 iff by definition of evaluation of ∨
forall I, max(evalI (¬F), evalI (G)) = 1 iff by definition of evaluation of ¬
forall I, max(1 − evalI (F), evalI (G)) = 1 iff by definition of max and eval
forall I, evalI (F) = 0 or evalI (G) = 1 iff by definition of satisfaction
forall I, I 6|= F or I |= G iff by definition of logical consequence
F |= G

--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:

Our friend John has invented something he calls a “propositional database”, which consists of a set
of positive unit clauses (propositional symbols) and of a set of “rules” of the form:
Condition → Consequence, where Condition and Consequence are sets of propositional symbols.
I asked John what he considers to be true facts, or simply “facts”, in his database, and he said:
“the minimal set of facts such that all positive unit clauses are facts, and, for every rule
Condition → Consequence, if all elements of Condition are facts, then also all elements of Consequence
are facts”.
2a) Given such a database D, we want to know if a certain symbol p is a fact in D. Explain very
briefly. What is the cost of deciding this? How?
2b) I want to know how many facts are true in D. Explain very briefly. What is the cost of counting
this? How?

The definition of the set of true facts is precisely the way Horn SAT is
decided by positive unit propagation: all positive unit clauses are facts, and each rule
{p1, . . . , pn} → {q1, . . . , qm} has exactly the same effect as the propagation of the Horn clauses
¬p1 ∨ . . . ∨ ¬pn ∨ q1 . . . ¬p1 ∨ . . . ∨ ¬pn ∨ qm.
So after the positive unit propagation finishes, we can check whether a given p is a fact, and we can
count the number of facts, all of which can be done in linear time.


--------------------------------------------------------------------------------------------------

Problem 3. (4 points). 
                  
Consider the following decision problem, called “MaxSAT”:
Input: A natural number k and a set S of n propositional clauses over propositional symbols P.
Question: Is there any interpretation I : P → {0, 1} that satisfies at least k clauses of S?

4a) Do you think that MaxSAT is polynomial? NP-complete? Exponential? Why?
It is NP-complete:
-MaxSAT is not easier than general SAT since SAT is the particular case of MaxSAT where k = n.
-MaxSAT is also not harder than SAT since one can reduce MaxSAT to SAT> decide MaxSAT with
one call to a SAT solver.

4b) How would you use a SAT solver to decide it?
Let S be {C1, ..., Cn}. Use new auxiliary variables x1, ...,  xn. Let S' be {C1 v -x1, ..., Cn v -xn}.
Then we need to find a model I for S' such that at least k of the auxiliary variables are true. So,
running the solver with input clauses S' U Cardinality constraint x1+...+xn >= k will find the desired I if it
exists and return unsat otherwise. 


4c) How would you use a SAT solver to solve the optimization version of MaxSAT, that is, how to
find the I that satisfies as many of the clauses of S as possible?

For this we need more than one call to the SAT solver.
A) Run the solver on the input S' defined as in 3b). Note that S'is satisfiable (just set all ai's to 1).
B) If it finds a model where m ai's are false, run again with input S' ∪ Card, where Card is the set
of clauses obtained by encoding the cardinality constraint ¬a1 + . . . + ¬an > m. Repeat step B (each
time finding models with more false ai's), until the solver returns unsat. The last solution found is the
optimal one.

--------------------------------------------------------------------------------------------------


Problem 3. (4 points). 
                  
Is 3-SAT NP-complete? Explain your answer very briefly, using the fact that SAT
(deciding the satisfiability of an arbitrary propositional formula F) is NP-complete.

3-SAT is the problem of deciding the satisfiability of a set of clauses S with at most 3
literals per clause. Yes, it is NP-complete. For this, we need to show two things:
A) 3-SAT is NP-hard (not easier than general SAT) since we can polynomially reduce SAT to 3-SAT:
the Tseitin transformation in polynomial time reduces SAT for an arbitrary F to a polynomial-sized
3-SAT set of clauses S that is equisatisfiable to F.
B) 3-SAT is in NP (not harder than SAT) since one can polynomially reduce 3-SAT to SAT: this is
trivial because 3-SAT is already a particular case of SAT (since S is already a propositional formula).
--------------------------------------------------------------------------------------------------

