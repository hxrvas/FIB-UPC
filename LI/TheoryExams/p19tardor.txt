--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 10th, 2019. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (4 points).                                   @n@nota1:

Consider the following statement. For all propositional formulas F, G, H,
(F → G) ∧ (H → G) is satisfiable iff ¬G |= ¬F ∧ ¬H.
Prove the following using only the definitions of propositional logic.

1a) Is the ⇒ implication of this iff statement true?

This is not true.
Counter example: Let F = G = p and H = q. Then (-F v G) & (-H v G) is satisfiable
(any interpretation where p is true is a model, but -G not|= -F & -H
If I(p) = 0 and I(q) = 1 then I|= -G but I not|= -F & -H.2

1b) Is the ⇐ implication of this iff statement true?

-G |= -F & -H
AI, I not|= -G or I |= -F & -H
AI, eval_I(-G)=0 or eval_I(-F & -H) = 1
AI, 1-eval_I(G) = 0 or min(eval_I(-F), eval_I(-H)) = 1
AI, eval_I(G) = 1 or eval_I(-F)=eval_I(-H)=1
AI, max(eval_I(-F), eval_I(G)) = 1 and max(eval_I(-H), eval_I(G)) = 1
AI, eval_I(-F v G) = 1 and eval_I(-H v G) = 1
AI, min(eval_I(-F v G), eval_I(-H v G) = 1
AI, eval_I((-F v G) & (-H v G)) = 1
(F->G)&(H->G) is satisfiable and a tautology

1c) Is it true that if ¬G |= ¬F ∧ ¬H, then (F → G) ∧ (H → G) is a tautology?
(hint for 1c: use what you did in 1b).
Yes



--------------------------------------------------------------------------------------------------

Problem 2. (4 points).                                   @n@nota2:

Let S1, S2 be the two sets of clauses given below. How many models does each one of
them have? Give a very short and simple answer, based on what these sets encode.

S1 = {¬x0 ∨ ¬x1, ¬x0 ∨ ¬x2, ¬x0 ∨ ¬a1, ¬x1 ∨ ¬x2, ¬x1 ∨ ¬a1, ¬x2 ∨ ¬a1,
	a1 ∨ ¬x3, a1 ∨ ¬x4, ¬x3 ∨ ¬x4 }

S2 = {¬x0 ∨ ¬a2, ¬x0 ∨ ¬a1, ¬x0 ∨ ¬a0
	¬x1 ∨ ¬a2, ¬x1 ∨ ¬a1, ¬x1 ∨ a0
	¬x2 ∨ ¬a2, ¬x2 ∨ a1, ¬x2 ∨ ¬a0
	¬x3 ∨ ¬a2, ¬x3 ∨ a1, ¬x3 ∨ a0
	¬x4 ∨ a2, ¬x4 ∨ ¬a1, ¬x4 ∨ ¬a0 }

S1 and S2 are the Heule-3 and logarithmic encodings of x0 + . . . + x4 ≤ 1, respectively.

S1 has 7 models: if some xi is true then all other xj become false and also a1 has only one possible
value (5 models); if all xi are false then a1 can take either value (2 more models).

S2 has 13 models: if some xi is true then all other xj become false and also the a4, a2, a1 have only
one possible value (5 models); if all xi are false then the a4, a2, a1 can take all 23 = 8 possible values.

--------------------------------------------------------------------------------------------------

Problem 3. (2 points). 
                  
Given a graph, we want to decide whether it is 2-colorable, that is, if we can assign
one of 2 colors to each node such that, for every edge (u, v), nodes u and v get different colors. Give
a short and simple answer based on propositional logic of the following: what is the computational
complexity of this problem? Is it polynomial, or NP-complete, or ... ?

We can encode 2-colorable as a CNF formula the following way:
Variables:
xi, which mean node x gets color 1
Constraints:
For every node xi on clause, xi v -xi, each node has to be one of the two colors.
For every edge (u, v) two clauses, xu v xv & -xu v -xv.

This is a 2-SAT problem, which is polynomial, and can be solved in linear time.

--------------------------------------------------------------------------------------------------

