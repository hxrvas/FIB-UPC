--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 9th, 2020. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (3 points).                                   @n@nota1:

Prove, using only the definitions of propositional logic, that the deduction rule of resolution in propositional 
logic is correct, that is, if from the two clauses C1 and C2 by resolution we can obtain a clause D, 
then C1 ∧ C2 |= D.

If from C1 and C2 by resolution you obtain a clause D, then C1 must be of the form p v C1', C2 must be 
of the form -p v C2' and D must be C1' v C2'.

Now, we will prove that indeed p v C1' & -p v C2' |= C1' v C2'.

We will prove it by case analysis.

Case A)

I(p) = 1, and I |= (p v C1' & -p v C2')

I |= (p v C1' & -p v C2')				iff [by definition of satisfaction]
eval_I(p v C1' & -p v C2') = 1			iff [by definition of eval_I &]
min(eval_I(p v C1'), eval_I(-p v C2')) = 1	iff [because I(p)=1]
min(1, C2') = 1						
C2' = 1
max(C1', C2') = 1						
I |= C1' v C2'

Case B)
Analogous

--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:

Assuming you can use a SAT solver or any other algorithm, explain very briefly what you would do
and what the computational cost would be and why, to decide the following two problems:

2a) Given a formula F in disjunctive normal form (DNF), decide whether F is a tautology.

No polynomial algorithm is known. If it exists, then SAT for CNF is polynomial too, because a CNF F is 
unsatisfiable iff -F is a tautology, and by moving the negations of -F inward (using de Morgan and doble
negation), in linear time we obtain a DNF.

2b) Given a formula F in disjunctive normal form (DNF), decide whether F is a satisfiable.

A DNF has the form C1 v ... v Cn where each Ci is a cube, a conjunction of literals. It is satisfiable if some
Ci is satisfiable, which is the case if it does not contain a literal and its negation. This can be
checked in linear time.

--------------------------------------------------------------------------------------------------

Problem 3. (4 points). 
                  
Let P be a set of propositional predicate symbols. Let S be a set of clauses over P and let N be a
subset of P. We define flip(N, S) to be the set of clauses obtained from S by flipping (changing the
sign) of all literals with symbols in N.

For example, 	flip( {p, q}, { p ∨ ¬q ∨ ¬r, q ∨ r } ) is { ¬p ∨ q ∨ ¬r, ¬q ∨ r }.

A clause is called Horn if it has at most one positive literal. A set of clauses S is called renamable
Horn if there is some N ⊆ P such that flip(N, S) is a set of Horn clauses.

3a) Explain in three lines: given S and N such that flip(N, S) is a set of Horn clauses, what would
you do to efficiently decide whether S is satisfiable, and why?
In linear time, convert S with flip(N,S) to a set of Horn clauses, which can be decided satisfiable or
not in linear time. S and its flipped formula are equisatisfiable, as if I is a model of one of them, then
I' is a model of the other one, where I'(p) = I(p) iff p is not in N, and I'(p)=1-I(p) if p is in N.

3b) Given an arbitrary set of clauses S, we want to decide whether it is renamable Horn and, if so,
find the corresponding N. We will do this using an algorithm based on... SAT! For each p ∈ P, we
introduce a SAT variable flipped(p) meaning that symbol p is in N. Then we add clauses for every
clause C of S and every pair of literals l and l' in C, forbidding that after doing all flips,  l and l'
both become positive.

Explain in three lines: which clauses do you need, what is the cost of the resulting SAT-based
algorithm and why?

For every pair of literals appearing in the same clause of S:
a) if both are positive symbols p and q then we add the clause	flipped(p) v flipped(q)
b) if both are negative, of the form -p and -q then we add 		-flipped(p) v -flipped(q)
c) if they are -p and q, we add						-flipped(p) v flipped(q)

This gives a quadratic number of 2-SAT clauses, so using the linear 2-SAT algorithm
we get a quadratic algorithm for deciding whether S is renamable Horn and, if so, finding
the corresponding N.
--------------------------------------------------------------------------------------------------

