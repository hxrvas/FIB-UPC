--------------------------------------------------------------------------------------------------
Logic in Computer Science, November 9th, 2021. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (3 points).                                   @n@nota1:


1a)
Let F and G be propositional formulas such that F is satisfiable and F -> G is also satisfiable.
Is it true that G is satisfiable? Prove it using only the definitions of propositional logic.

F -> G is (-F v G)

This is false.
Let F be p and G be p & -p. Then, 
F is satisfiable, because if I(p)=1 then eval_I(F) = 1,
-F v G is satisfiable, because if I(p)=0, then eval_I(-F v G) = 1,
but G is unsatisfiable.


1b)
Let F and G be propositional formulas such that F is a tautology.
Is it true that  F & G  is logically equivalent to G?
Prove it using only the definitions of propositional logic.

Yes. This is true.
F & G   is logically equivalent to  G                       iff   by def of logical equivalence
F & G   has the same models as  G                           iff   by def of model
forall I,   I |= F & G   iff  I |= G                        iff   by def of |= 
forall I,   eval_I( F & G ) =  eval_I( G )                  iff   by def eval AND
forall I,   min( eval_I( F ), eval_I(G )  ) =  eval_I( G )  iff   since F is a tautology, we have eval_I(F)=1 for all I (see *)
forall I,   min( 1, eval_I( G )  ) =  eval_I( G )           iff   since eval always returns either 0 or 1
forall I,           eval_I( G )    =  eval_I( G )           iff   true

*:
F is a tautology                iff  by def of tautology
forall I  we have I |= F        iff  by def of |= 
forall I  we have eval_I(F)=1

--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:

A 1in3-constraint is an expression of the form  1in3( lit1, lit2, lit3 ) where lit1,lit2 and lit3 are literals.
An interpretation I satisfies  1in3( lit1, lit2, lit3 )  if it satisfies EXACTLY ONE of lit1, lit2 and lit3.
The 1in3-SAT problem is the problem of deciding the satisfiability of a conjunction (AND) of 1in3-constraints.
For example,
1in3(x,y,z)  &  1in3(-x,-y, z) &  1in3(-x,y,-z)   is satisfiable (if I(x)=1, I(y)=0, I(z)=0 then I is a model)
but 
1in3(x,y,z)  &  1in3(-x,-y,-z)   is unsatisfiable.


2a) Is 1in3-SAT in NP? Explain in a few words why.

Yes, 1in3-SAT is in NP, because its a decisional problem where, if the answer is yes, there exists 
a polynomial-sized verifier, a model I, that can be checked if true in polynomial time.


2b) Let C be a normal 3-SAT clause  l1 v l2 v l3, where l1,l2,l3 are literals over variables x,y,z.
    Let F be:   1in3(-l1,a,b)  &  1in3(l2,b,c)  &  1in3(-l3,c,d)   (here a,b,c,d are variables).
    Check for each one of the 7 possible models I of C that then F has a model I' such
    that I' "extends" I, that is I(x)=I'(x), I(y)=I'(y), I(z)=I'(z).
    
    Similarly, check that for the (unique) I that is NOT a model of C, there is no model I' of F extending I
    (and therefore every model I' of F extends a model I of C).

The 7 possible models of C and its extensions are:
- x=1, y=0, z=0		--------> x=1, y=0, z=0, a=0 , b=1 , c=0, d=0 	
- x=0, y=1, z=0		--------> x=0, y=1, z=0, a=0 , b=0 , c=0, d=0
- x=0, y=0, z=1		--------> x=0, y=0, z=1, a=0 , b=0 , c=1, d=0

- x=1, y=1, z=0		--------> x=1, y=1, z=0, a=1 , b=0 , c=0, d=0
- x=1, y=0, z=1		--------> x=1, y=0, z=1, a=0 , b=1 , c=0, d=1
- x=0, y=1, z=1		--------> x=0, y=1, z=1, a=0 , b=0 , c=0, d=1

- x=1, y=1, z=1		--------> x=1, y=1, z=1, a=1 , b=0 , c=0, d=1

If I is not a model of C, then x = y = z = 0. Then, to satisfy 1in3(-l1, a, b), a and b 
would have to be false, to satisfy 1in3(-l3, c, d), c and d would have to be false, and to
satisfy 1in3(l2,b,c), b or c would have to be true. No model like this can exist, because
b or c would have to be true and false at the same time.

2c) Is 1in3-SAT NP-complete? Explain very briefly why. Hint: use 2a) and 2b).

Yes, 1in3-SAT is NP-complete, as is in NP (2a) and can be reduced to 3-SAT, which is NP-hard (2b).                  


--------------------------------------------------------------------------------------------------

Problem 3. (3 points).                                   @n@nota3:
For each one of the following problems, show that it is polynomial by expressing it as (or
reducing it to) a polynomial version of SAT.  Be very brief: just give the needed SAT variables and
clauses and say which polynomial SAT problem it is.  If there is no such reduction, just write: "Not possible".

3a) 2-coloring: given an undirected graph G and 2 colors,
can we assign a color to each node of G such that adyacent nodes get different colors?

SAT variables:
	Cik, which means the color of vertex i is k.

Clauses:

	-For every vertex v, Cv1 v Cv2, a vertex has to be one of the two colors
	-For every edge (i, j), two clauses, -Ci1 v -Cj1 and -Ci2 v -Cj2

This is 2-SAT, wich is polynomial

3b) 3-coloring.

Not possible.

3c) Amazon. Assume
    M is a list of Amazon products we MUST buy.
    P is a list of pairs (p,p') of products that are incompatible: we cannot buy p and also p'.
    R is a list of rules of the form "S needs p", indicating that, if we buy
          all products in the set of products S, then we must also buy the product p.
    Given M,P,R, can we buy a set of products satisfying the requirements of M,P,R?

SAT variables:
	B_x, meaning we buy a product
	
Clauses:
	-For every member m of M, a clause B_m, meaning we buy that product
	-For every (p, p') of P, a clause -p v -p', meaning we cannot buy p and also p'
	-For every rule {p1...pn} needs p, one clause -B_p1, v --- v -B_pn, p

This is Horn-SAT which is polynomial.

--------------------------------------------------------------------------------------------------

Problem 4. (1 point ).                                   @n@nota4:

4) UNIQUE-SAT is the problem of determining whether a given set of clauses S has exactly one model.
Explain very briefly how you would use a SAT solver to decide UNIQUE-SAT.

First, I would run the SAT solver on the set of clauses S:
	if its unsatisfiable, then output "no"
	if its satisfiable
		let I = {p1=1, p2=1 ... pm=1, q1=0, q2=0,...qn=0} the solution the solver outputed.
		I would add to S a clause -p1 v -p2 ... v -pn ... v q1 v q2 ... v qn that
		forbids this solution, and run the SAT solver again. 
		if uts unsatisfiable, output "yes"
		else output "no"

--------------------------------------------------------------------------------------------------


