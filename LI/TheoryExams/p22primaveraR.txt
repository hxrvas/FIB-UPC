
--------------------------------------------------------------------------------------------------
Logic in Computer Science, April 1st, 2022. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (4 points).                                   @n@nota1:


1a)
Let F and G be propositional formulas such that G |= F.  Is it true that then always  F |= G  or  F |= -G ?
Prove it as simply as you can using only the definitions of propositional logic.

This is false. 
Let G be p and F be p v -p.
Then, G |= F, all models that satisfy G (I(p) = 1) satify F. But,
F not|= G, because if I(p) = 0, I is a model of F but not of G, and
F not|= -G, because if I(p) = 1, I is a model of F but not of -G. 

1b)
Let F and G be propositional formulas.
Is it true that F |= G iff  F & -G  is unsatisfiable?
Prove it using only the definitions of propositional logic.

F |= G 						iff [by definition of logical consequence]
A I, I not|= F or I |= G			iff [by definition of satisfaction]
A I, eval_I(F)=0 or eval_I(G) = 1		iff [by property of -]
A I, eval_I(F)=0 or 1-eval_I(G) = 0		iff [by definition of eval -]
A I, eval_I(F)=0 or eval_I(-G) = 0		iff [by definition of min]
A I, min(eval_I(F), eval_I(-G)) = 0		iff [by definition of eval &]
A I, eval_I(F & -G) = 0				iff [by definition of satisfaction]
A I, I not|= F & G				iff [by definition of unsatisfiable]
F & -G is unsatisfiable


--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:


2a) Explain in a few words why propositional SAT is in NP.

Propositional SAT is the following problem. Input: a propositional formula F. Question: Is F satisfiable?
It is in NP because if the answer is "yes" there is a polynomial-size certificate of this fact, a model I,
and we can check whether I |= F in polynomial time.


2b) Explain in a few words why 3-SAT is NP-complete. You may assume that SAT is NP-hard.

For 3-SAT to be NP-complete, we need:
a) 3-SAT is in NP.	It is for the same reason as explained in 2a.
b) 3-SAT is NP-hard. 	Because using the Tseitin transformation we can reduce SAT to 3-SAT:
				transform any formula into an equisatisfiable 3-SAT formula.


2c) Let F be an UNsatisfiable propositional formula built over n different predicate symbols.
Give the name of some method to express a proof (or certificate) of unsatisfiability (like a model is a 
certificate of satisfiability).
Do you think that every unsatisfiable F has such an unsatisfiability proof of size polynomial in n?
For example, a resolution proof. No, resolution proofs are not polynomial in size. In fact, it is widely believed (though
not proven) that no such polynomial proof exists, and thus P!=NP.

--------------------------------------------------------------------------------------------------

Problem 3. (2 points).                                   @n@nota3:
Here just give the answer, giving no explanations. Use a^b to denote "a to the power b".


3a)
How many Boolean functions with n input bits f: {0,1}^n --> {0,1} are there in terms of n?

2^(2^n)


3b)
Any propositional formula represents a Boolean function.
List the names of the other methods you know to represent Boolean functions.

Boolean circuits, truth tables, Binary Decision Diagram...

3c)
Is it true that two formulas F and G are logically equivalent iff they represent the same Boolean function?

Yes


--------------------------------------------------------------------------------------------------

Problem 4. (1 point ).                                   @n@nota4:

4) The published Sudoku puzzles usually are designed in such a way that exactly one solution exists.
Explain *very* briefly how you would use a SAT solver to check that a given Sudoku has exactly one solution.

Answer:
 -Call the SAT solver with input S, the set of the usual clauses for the given Sudoku.
 -If unsatisfiable, output "no".
 -If satisfiable with model I, where I(x_1)=0,...,I(x_n)=0, and I(y_1)=1,...,I(y_m)=1, 
      -add to S the clause  x_1 v...v x_n  v  -y_1 v...v -y_m  that "forbids" I,  and call the solver again:
      -if satisfiable, output "no"  else  output "yes".


--------------------------------------------------------------------------------------------------




